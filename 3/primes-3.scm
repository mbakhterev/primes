(define page-length 512)

(define (cursor P) (fxvector-ref P 0))
(define (cursor-set! P c) (fxvector-set! P 0 c))

(define (make-page n)
  (let ((P (make-fxvector page-length)))
    (cursor-set! P 2)
    (fxvector-set! P 1 n)
    P))

(define (push! n P)
  (let ((A (car P))
        (c (cursor (car P))))
    (if (fx< c (fxvector-length A))
        (begin (fxvector-set! A c n)
               (cursor-set! A (fx1+ c))
               P)
        (begin (set-cdr! P (cons (make-page n) '()))
               (cdr P)))))

(define (prime? n pages)
  (let ((l (isqrt n)))
    (let next ((P pages))
      (or (null? P)
          (let loop ((i 1))
            (if (fx< i (cursor (car P)))
                (let ((p (fxvector-ref (car P) i)))
                  (or (fx> p l)
                      (and (fxpositive? (fxremainder n p))
                           (loop (fx1+ i)))))
                (next (cdr P))))))))

(define (count P)
  (do ((p P (cdr p))
       (S 0 (fx+ S (cursor (car p)) -1)))
    ((null? p) S)))

(let ((N (string->number (cadr (command-line))))
      (primes (cons (make-page 2) '())))
  (do ((n 3 (fx+ 2 n))
       (P primes (if (prime? n primes) (push! n P) P)))
    ((> n N) (display (count primes)) (newline))))
