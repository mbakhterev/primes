(define (dump v) (display v) (newline))

(define (init-markvector limit)
  (assert (fx> limit 1))
  (let ((M (make-bytevector (fx1+ limit) 1)))
    (bytevector-u8-set! M 0 0)
    (bytevector-u8-set! M 1 0)
    M))

(define (vector-limit V L) (fxmin L (fx1- (bytevector-length V))))

(define (sieve! M limit p cursor)
  (let ((l (vector-limit M limit)))
    (do ((c cursor (fx+ c p)))
      ((fx> c l) (fx- c l 1))
      (bytevector-u8-set! M c 0))))

(define (next-prime-offset M limit start)
  (let ((l (vector-limit M limit)))
    (let loop ((i (fx+ start 1 (fxlogand start 1))))
      (cond ((fx> i l) (fx1+ limit))
            ((fxzero? (bytevector-u8-ref M i)) (loop (fx+ 2 i)))
            (else i)))))

(define (sum V L)
  (do ((i 0 (fx1+ i))
       (s 0 (fx+ s (bytevector-u8-ref V i))))
    ((fx> i (vector-limit V L)) s)))

(define (compactify primes cursors n)
  (let ((prime-vector (make-fxvector n))
        (cursor-vector (make-fxvector n)))
    (do ((i (fx1- n) (fx1- i))
         (P primes (cdr P))
         (C cursors (cdr C)))
      ((null? P) (values (fxvector->immutable-fxvector prime-vector) 
                         cursor-vector))
      (fxvector-set! prime-vector i (car P))
      (fxvector-set! cursor-vector i (car C)))))

(define (optimus-primes)
  (let* ((N (string->number (cadr (command-line))))
         (L (isqrt N))
         (M ((if (< L 2) make-bytevector init-markvector) L)))
    (do ((p 2 (next-prime-offset M L p))
         (n 0 (fx1+ n))
         (P '() (cons p P))
         (C '() (cons (sieve! M L p (+ p p)) C)))
      ((fx> p L) (let-values (((primes cursors) (compactify P C n)))
                   (values N M primes cursors))))))

(define (sieve-recursor-count! N M P C)
  (bytevector-fill! M 1)
  (let ((l (fxvector-length P)))
    (do ((i 0 (fx1+ i)))
      ((fx>= i l) (sum M N))
      (let ((p (fxvector-ref P i))
            (c (fxvector-ref C i)))
        (fxvector-set! C i (sieve! M N p c))))))

(let-values (((N M P C) (optimus-primes)))
  (if (fxzero? (fxvector-length P))
    (dump 0)
    (let ((L (bytevector-length M)))
      (let loop ((n (fxvector-length P))
                 (left (- N L)))
        (if (fxpositive? left)
          (loop (fx+ n (sieve-recursor-count! left M P C)) (- left L))
          (dump n))))))
